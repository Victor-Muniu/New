/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { CheckInCreateNestedManyWithoutCustomersInput } from "./CheckInCreateNestedManyWithoutCustomersInput";
import { Type } from "class-transformer";
import { CheckOutCreateNestedManyWithoutCustomersInput } from "./CheckOutCreateNestedManyWithoutCustomersInput";
import { GuestServiceCreateNestedManyWithoutCustomersInput } from "./GuestServiceCreateNestedManyWithoutCustomersInput";
import { InvoiceCreateNestedManyWithoutCustomersInput } from "./InvoiceCreateNestedManyWithoutCustomersInput";
import { BookingCreateNestedManyWithoutCustomersInput } from "./BookingCreateNestedManyWithoutCustomersInput";

@InputType()
class CustomerCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => CheckInCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => CheckInCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => CheckInCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  checkIns?: CheckInCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => CheckOutCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => CheckOutCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => CheckOutCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  checkOuts?: CheckOutCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => GuestServiceCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => GuestServiceCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => GuestServiceCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  guestServices?: GuestServiceCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => InvoiceCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => InvoiceCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => InvoiceCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  invoices?: InvoiceCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => BookingCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => BookingCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => BookingCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  bookings?: BookingCreateNestedManyWithoutCustomersInput;
}

export { CustomerCreateInput as CustomerCreateInput };
