/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GuestServiceService } from "../guestService.service";
import { GuestServiceCreateInput } from "./GuestServiceCreateInput";
import { GuestService } from "./GuestService";
import { GuestServiceFindManyArgs } from "./GuestServiceFindManyArgs";
import { GuestServiceWhereUniqueInput } from "./GuestServiceWhereUniqueInput";
import { GuestServiceUpdateInput } from "./GuestServiceUpdateInput";

export class GuestServiceControllerBase {
  constructor(protected readonly service: GuestServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GuestService })
  async createGuestService(
    @common.Body() data: GuestServiceCreateInput
  ): Promise<GuestService> {
    return await this.service.createGuestService({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        serviceDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GuestService] })
  @ApiNestedQuery(GuestServiceFindManyArgs)
  async guestServices(@common.Req() request: Request): Promise<GuestService[]> {
    const args = plainToClass(GuestServiceFindManyArgs, request.query);
    return this.service.guestServices({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        serviceDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GuestService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async guestService(
    @common.Param() params: GuestServiceWhereUniqueInput
  ): Promise<GuestService | null> {
    const result = await this.service.guestService({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        serviceDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GuestService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGuestService(
    @common.Param() params: GuestServiceWhereUniqueInput,
    @common.Body() data: GuestServiceUpdateInput
  ): Promise<GuestService | null> {
    try {
      return await this.service.updateGuestService({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          serviceType: true,
          serviceDate: true,

          room: {
            select: {
              id: true,
            },
          },

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GuestService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGuestService(
    @common.Param() params: GuestServiceWhereUniqueInput
  ): Promise<GuestService | null> {
    try {
      return await this.service.deleteGuestService({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          serviceType: true,
          serviceDate: true,

          room: {
            select: {
              id: true,
            },
          },

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
