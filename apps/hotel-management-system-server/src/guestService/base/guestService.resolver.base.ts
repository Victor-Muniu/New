/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GuestService } from "./GuestService";
import { GuestServiceCountArgs } from "./GuestServiceCountArgs";
import { GuestServiceFindManyArgs } from "./GuestServiceFindManyArgs";
import { GuestServiceFindUniqueArgs } from "./GuestServiceFindUniqueArgs";
import { CreateGuestServiceArgs } from "./CreateGuestServiceArgs";
import { UpdateGuestServiceArgs } from "./UpdateGuestServiceArgs";
import { DeleteGuestServiceArgs } from "./DeleteGuestServiceArgs";
import { Room } from "../../room/base/Room";
import { Customer } from "../../customer/base/Customer";
import { GuestServiceService } from "../guestService.service";
@graphql.Resolver(() => GuestService)
export class GuestServiceResolverBase {
  constructor(protected readonly service: GuestServiceService) {}

  async _guestServicesMeta(
    @graphql.Args() args: GuestServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GuestService])
  async guestServices(
    @graphql.Args() args: GuestServiceFindManyArgs
  ): Promise<GuestService[]> {
    return this.service.guestServices(args);
  }

  @graphql.Query(() => GuestService, { nullable: true })
  async guestService(
    @graphql.Args() args: GuestServiceFindUniqueArgs
  ): Promise<GuestService | null> {
    const result = await this.service.guestService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GuestService)
  async createGuestService(
    @graphql.Args() args: CreateGuestServiceArgs
  ): Promise<GuestService> {
    return await this.service.createGuestService({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GuestService)
  async updateGuestService(
    @graphql.Args() args: UpdateGuestServiceArgs
  ): Promise<GuestService | null> {
    try {
      return await this.service.updateGuestService({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuestService)
  async deleteGuestService(
    @graphql.Args() args: DeleteGuestServiceArgs
  ): Promise<GuestService | null> {
    try {
      return await this.service.deleteGuestService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: GuestService): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: GuestService
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
