/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GuestService as PrismaGuestService,
  Room as PrismaRoom,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class GuestServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GuestServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.guestService.count(args);
  }

  async guestServices(
    args: Prisma.GuestServiceFindManyArgs
  ): Promise<PrismaGuestService[]> {
    return this.prisma.guestService.findMany(args);
  }
  async guestService(
    args: Prisma.GuestServiceFindUniqueArgs
  ): Promise<PrismaGuestService | null> {
    return this.prisma.guestService.findUnique(args);
  }
  async createGuestService(
    args: Prisma.GuestServiceCreateArgs
  ): Promise<PrismaGuestService> {
    return this.prisma.guestService.create(args);
  }
  async updateGuestService(
    args: Prisma.GuestServiceUpdateArgs
  ): Promise<PrismaGuestService> {
    return this.prisma.guestService.update(args);
  }
  async deleteGuestService(
    args: Prisma.GuestServiceDeleteArgs
  ): Promise<PrismaGuestService> {
    return this.prisma.guestService.delete(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.guestService
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.guestService
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
