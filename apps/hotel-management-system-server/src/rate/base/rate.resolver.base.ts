/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rate } from "./Rate";
import { RateCountArgs } from "./RateCountArgs";
import { RateFindManyArgs } from "./RateFindManyArgs";
import { RateFindUniqueArgs } from "./RateFindUniqueArgs";
import { CreateRateArgs } from "./CreateRateArgs";
import { UpdateRateArgs } from "./UpdateRateArgs";
import { DeleteRateArgs } from "./DeleteRateArgs";
import { RateService } from "../rate.service";
@graphql.Resolver(() => Rate)
export class RateResolverBase {
  constructor(protected readonly service: RateService) {}

  async _ratesMeta(
    @graphql.Args() args: RateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rate])
  async rates(@graphql.Args() args: RateFindManyArgs): Promise<Rate[]> {
    return this.service.rates(args);
  }

  @graphql.Query(() => Rate, { nullable: true })
  async rate(@graphql.Args() args: RateFindUniqueArgs): Promise<Rate | null> {
    const result = await this.service.rate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rate)
  async createRate(@graphql.Args() args: CreateRateArgs): Promise<Rate> {
    return await this.service.createRate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Rate)
  async updateRate(@graphql.Args() args: UpdateRateArgs): Promise<Rate | null> {
    try {
      return await this.service.updateRate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rate)
  async deleteRate(@graphql.Args() args: DeleteRateArgs): Promise<Rate | null> {
    try {
      return await this.service.deleteRate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
