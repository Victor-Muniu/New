/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoomService } from "../room.service";
import { RoomService } from "../../roomService/base/RoomService";
import { RoomCreateInput } from "./RoomCreateInput";
import { Room } from "./Room";
import { RoomFindManyArgs } from "./RoomFindManyArgs";
import { RoomWhereUniqueInput } from "./RoomWhereUniqueInput";
import { RoomUpdateInput } from "./RoomUpdateInput";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationWhereUniqueInput } from "../../reservation/base/ReservationWhereUniqueInput";
import { RoomServiceFindManyArgs } from "../../roomService/base/RoomServiceFindManyArgs";
import { RoomServiceWhereUniqueInput } from "../../roomService/base/RoomServiceWhereUniqueInput";
import { CheckInFindManyArgs } from "../../checkIn/base/CheckInFindManyArgs";
import { CheckIn } from "../../checkIn/base/CheckIn";
import { CheckInWhereUniqueInput } from "../../checkIn/base/CheckInWhereUniqueInput";
import { CheckOutFindManyArgs } from "../../checkOut/base/CheckOutFindManyArgs";
import { CheckOut } from "../../checkOut/base/CheckOut";
import { CheckOutWhereUniqueInput } from "../../checkOut/base/CheckOutWhereUniqueInput";
import { GuestServiceFindManyArgs } from "../../guestService/base/GuestServiceFindManyArgs";
import { GuestService } from "../../guestService/base/GuestService";
import { GuestServiceWhereUniqueInput } from "../../guestService/base/GuestServiceWhereUniqueInput";
import { RoomStatusFindManyArgs } from "../../roomStatus/base/RoomStatusFindManyArgs";
import { RoomStatus } from "../../roomStatus/base/RoomStatus";
import { RoomStatusWhereUniqueInput } from "../../roomStatus/base/RoomStatusWhereUniqueInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { MaintenanceRequestFindManyArgs } from "../../maintenanceRequest/base/MaintenanceRequestFindManyArgs";
import { MaintenanceRequest } from "../../maintenanceRequest/base/MaintenanceRequest";
import { MaintenanceRequestWhereUniqueInput } from "../../maintenanceRequest/base/MaintenanceRequestWhereUniqueInput";

export class RoomControllerBase {
  constructor(protected readonly service: RoomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Room })
  async createRoom(@common.Body() data: RoomCreateInput): Promise<Room> {
    return await this.service.createRoom({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        roomNumber: true,
        typeField: true,
        pricePerNight: true,
        availability: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Room] })
  @ApiNestedQuery(RoomFindManyArgs)
  async rooms(@common.Req() request: Request): Promise<Room[]> {
    const args = plainToClass(RoomFindManyArgs, request.query);
    return this.service.rooms({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        roomNumber: true,
        typeField: true,
        pricePerNight: true,
        availability: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Room })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async room(
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<Room | null> {
    const result = await this.service.room({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        roomNumber: true,
        typeField: true,
        pricePerNight: true,
        availability: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Room })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoom(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() data: RoomUpdateInput
  ): Promise<Room | null> {
    try {
      return await this.service.updateRoom({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          roomNumber: true,
          typeField: true,
          pricePerNight: true,
          availability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Room })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoom(
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<Room | null> {
    try {
      return await this.service.deleteRoom({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          roomNumber: true,
          typeField: true,
          pricePerNight: true,
          availability: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reservations")
  @ApiNestedQuery(ReservationFindManyArgs)
  async findReservations(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<Reservation[]> {
    const query = plainToClass(ReservationFindManyArgs, request.query);
    const results = await this.service.findReservations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDate: true,
        endDate: true,
        customerName: true,
        customerEmail: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reservations")
  async connectReservations(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reservations")
  async updateReservations(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reservations")
  async disconnectReservations(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/roomServices")
  @ApiNestedQuery(RoomServiceFindManyArgs)
  async findRoomServices(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<RoomService[]> {
    const query = plainToClass(RoomServiceFindManyArgs, request.query);
    const results = await this.service.findRoomServices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        price: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/roomServices")
  async connectRoomServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomServices: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/roomServices")
  async updateRoomServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomServices: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/roomServices")
  async disconnectRoomServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomServices: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/checkIns")
  @ApiNestedQuery(CheckInFindManyArgs)
  async findCheckIns(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<CheckIn[]> {
    const query = plainToClass(CheckInFindManyArgs, request.query);
    const results = await this.service.findCheckIns(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        checkInDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/checkIns")
  async connectCheckIns(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/checkIns")
  async updateCheckIns(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/checkIns")
  async disconnectCheckIns(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/checkOuts")
  @ApiNestedQuery(CheckOutFindManyArgs)
  async findCheckOuts(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<CheckOut[]> {
    const query = plainToClass(CheckOutFindManyArgs, request.query);
    const results = await this.service.findCheckOuts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        checkOutDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/checkOuts")
  async connectCheckOuts(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkOuts: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/checkOuts")
  async updateCheckOuts(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkOuts: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/checkOuts")
  async disconnectCheckOuts(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: CheckOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkOuts: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/guestServices")
  @ApiNestedQuery(GuestServiceFindManyArgs)
  async findGuestServices(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<GuestService[]> {
    const query = plainToClass(GuestServiceFindManyArgs, request.query);
    const results = await this.service.findGuestServices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        serviceDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/guestServices")
  async connectGuestServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: GuestServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guestServices: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/guestServices")
  async updateGuestServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: GuestServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guestServices: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/guestServices")
  async disconnectGuestServices(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: GuestServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      guestServices: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/roomStatuses")
  @ApiNestedQuery(RoomStatusFindManyArgs)
  async findRoomStatuses(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<RoomStatus[]> {
    const query = plainToClass(RoomStatusFindManyArgs, request.query);
    const results = await this.service.findRoomStatuses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/roomStatuses")
  async connectRoomStatuses(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomStatuses: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/roomStatuses")
  async updateRoomStatuses(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomStatuses: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/roomStatuses")
  async disconnectRoomStatuses(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: RoomStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roomStatuses: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        bookingDate: true,

        room: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/maintenanceRequests")
  @ApiNestedQuery(MaintenanceRequestFindManyArgs)
  async findMaintenanceRequests(
    @common.Req() request: Request,
    @common.Param() params: RoomWhereUniqueInput
  ): Promise<MaintenanceRequest[]> {
    const query = plainToClass(MaintenanceRequestFindManyArgs, request.query);
    const results = await this.service.findMaintenanceRequests(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        requestDate: true,
        description: true,
        status: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceRequests")
  async connectMaintenanceRequests(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        connect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceRequests")
  async updateMaintenanceRequests(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        set: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceRequests")
  async disconnectMaintenanceRequests(
    @common.Param() params: RoomWhereUniqueInput,
    @common.Body() body: MaintenanceRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRequests: {
        disconnect: body,
      },
    };
    await this.service.updateRoom({
      where: params,
      data,
      select: { id: true },
    });
  }
}
