/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Room as PrismaRoom,
  Reservation as PrismaReservation,
  RoomService as PrismaRoomService,
  CheckIn as PrismaCheckIn,
  CheckOut as PrismaCheckOut,
  GuestService as PrismaGuestService,
  RoomStatus as PrismaRoomStatus,
  Booking as PrismaBooking,
  MaintenanceRequest as PrismaMaintenanceRequest,
} from "@prisma/client";

export class RoomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RoomCountArgs, "select">): Promise<number> {
    return this.prisma.room.count(args);
  }

  async rooms(args: Prisma.RoomFindManyArgs): Promise<PrismaRoom[]> {
    return this.prisma.room.findMany(args);
  }
  async room(args: Prisma.RoomFindUniqueArgs): Promise<PrismaRoom | null> {
    return this.prisma.room.findUnique(args);
  }
  async createRoom(args: Prisma.RoomCreateArgs): Promise<PrismaRoom> {
    return this.prisma.room.create(args);
  }
  async updateRoom(args: Prisma.RoomUpdateArgs): Promise<PrismaRoom> {
    return this.prisma.room.update(args);
  }
  async deleteRoom(args: Prisma.RoomDeleteArgs): Promise<PrismaRoom> {
    return this.prisma.room.delete(args);
  }

  async findReservations(
    parentId: string,
    args: Prisma.ReservationFindManyArgs
  ): Promise<PrismaReservation[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reservations(args);
  }

  async findRoomServices(
    parentId: string,
    args: Prisma.RoomServiceFindManyArgs
  ): Promise<PrismaRoomService[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roomServices(args);
  }

  async findCheckIns(
    parentId: string,
    args: Prisma.CheckInFindManyArgs
  ): Promise<PrismaCheckIn[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .checkIns(args);
  }

  async findCheckOuts(
    parentId: string,
    args: Prisma.CheckOutFindManyArgs
  ): Promise<PrismaCheckOut[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .checkOuts(args);
  }

  async findGuestServices(
    parentId: string,
    args: Prisma.GuestServiceFindManyArgs
  ): Promise<PrismaGuestService[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .guestServices(args);
  }

  async findRoomStatuses(
    parentId: string,
    args: Prisma.RoomStatusFindManyArgs
  ): Promise<PrismaRoomStatus[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roomStatuses(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findMaintenanceRequests(
    parentId: string,
    args: Prisma.MaintenanceRequestFindManyArgs
  ): Promise<PrismaMaintenanceRequest[]> {
    return this.prisma.room
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceRequests(args);
  }
}
