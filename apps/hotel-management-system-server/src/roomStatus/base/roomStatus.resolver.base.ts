/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RoomStatus } from "./RoomStatus";
import { RoomStatusCountArgs } from "./RoomStatusCountArgs";
import { RoomStatusFindManyArgs } from "./RoomStatusFindManyArgs";
import { RoomStatusFindUniqueArgs } from "./RoomStatusFindUniqueArgs";
import { CreateRoomStatusArgs } from "./CreateRoomStatusArgs";
import { UpdateRoomStatusArgs } from "./UpdateRoomStatusArgs";
import { DeleteRoomStatusArgs } from "./DeleteRoomStatusArgs";
import { Room } from "../../room/base/Room";
import { RoomStatusService } from "../roomStatus.service";
@graphql.Resolver(() => RoomStatus)
export class RoomStatusResolverBase {
  constructor(protected readonly service: RoomStatusService) {}

  async _roomStatusesMeta(
    @graphql.Args() args: RoomStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RoomStatus])
  async roomStatuses(
    @graphql.Args() args: RoomStatusFindManyArgs
  ): Promise<RoomStatus[]> {
    return this.service.roomStatuses(args);
  }

  @graphql.Query(() => RoomStatus, { nullable: true })
  async roomStatus(
    @graphql.Args() args: RoomStatusFindUniqueArgs
  ): Promise<RoomStatus | null> {
    const result = await this.service.roomStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoomStatus)
  async createRoomStatus(
    @graphql.Args() args: CreateRoomStatusArgs
  ): Promise<RoomStatus> {
    return await this.service.createRoomStatus({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RoomStatus)
  async updateRoomStatus(
    @graphql.Args() args: UpdateRoomStatusArgs
  ): Promise<RoomStatus | null> {
    try {
      return await this.service.updateRoomStatus({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomStatus)
  async deleteRoomStatus(
    @graphql.Args() args: DeleteRoomStatusArgs
  ): Promise<RoomStatus | null> {
    try {
      return await this.service.deleteRoomStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: RoomStatus): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
